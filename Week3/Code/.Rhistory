# clear workspace
rm(list=ls())
# imports
library(ggplot2)
library(dplyr)
# load the data
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF) # check the size of the data frame you loaded
pdf("../Results/PP_Regress.pdf", # open blank pdf page using a relative path
8.3, 11.7)  # page dimensions in inches
# plot the predator and prey mass by feeding type and predator lifestage using the linear model method
qplot(Prey.mass, Predator.mass, data = MyDF, log="xy",
xlab = "Prey mass in grams",
ylab = "Predator mass in grams",
colour = Predator.lifestage, shape = I(3)) +
geom_smooth(method = "lm",fullrange = TRUE) + # plot linear regressions
facet_grid(Type.of.feeding.interaction~.) + # all plots on the same grid
theme_bw() %+replace%
theme(legend.position = "bottom",
panel.border = element_rect(colour = "grey", fill = NA)) +
guides(colour = guide_legend(nrow = 1)) + # put legend on one line
theme(legend.title = element_text(size = 9, face="bold"))
graphics.off() # close all open devices/windows
# calculate the regression results corresponding to the lines fitted in the figure
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Results.csv")
################### Calculating a linear model for predator and prey masses #####################
############################ by feeding type and predator lifestage #############################
# Plots graphs from predator and prey size data, including linear regressions,
# differentiated by predator lifestage, facected by type of feeding interaction and saves to pdf.
# Calculates regression results corresponding to the lines fitted in the figure and saves as
# csv demlimited table.
# clear workspace
rm(list=ls())
# imports
library(ggplot2)
library(dplyr)
# load the data
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF) # check the size of the data frame you loaded
pdf("../Results/PP_Regress.pdf", # open blank pdf page using a relative path
8.3, 11.7)  # page dimensions in inches
# plot the predator and prey mass by feeding type and predator lifestage using the linear model method
qplot(Prey.mass, Predator.mass, data = MyDF, log="xy",
xlab = "Prey mass in grams",
ylab = "Predator mass in grams",
colour = Predator.lifestage, shape = I(3)) +
geom_smooth(method = "lm",fullrange = TRUE) + # plot linear regressions
facet_grid(Type.of.feeding.interaction~.) + # all plots on the same grid
theme_bw() %+replace%
theme(legend.position = "bottom",
panel.border = element_rect(colour = "grey", fill = NA)) +
guides(colour = guide_legend(nrow = 1)) + # put legend on one line
theme(legend.title = element_text(size = 9, face="bold"))
graphics.off() # close all open devices/windows
# calculate the regression results corresponding to the lines fitted in the figure
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Results.csv")
################### Calculating a linear model for predator and prey masses #####################
############################ by feeding type and predator lifestage #############################
# Plots graphs from predator and prey size data, including linear regressions,
# differentiated by predator lifestage, facected by type of feeding interaction and saves to pdf.
# Calculates regression results corresponding to the lines fitted in the figure and saves as
# csv demlimited table.
# clear workspace
rm(list=ls())
# imports
library(dplyr)
library(ggplot2)
# load the data
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF) # check the size of the data frame you loaded
pdf("../Results/PP_Regress.pdf", # open blank pdf page using a relative path
8.3, 11.7)  # page dimensions in inches
# plot the predator and prey mass by feeding type and predator lifestage using the linear model method
qplot(Prey.mass, Predator.mass, data = MyDF, log="xy",
xlab = "Prey mass in grams",
ylab = "Predator mass in grams",
colour = Predator.lifestage, shape = I(3)) +
geom_smooth(method = "lm",fullrange = TRUE) + # plot linear regressions
facet_grid(Type.of.feeding.interaction~.) + # all plots on the same grid
theme_bw() %+replace%
theme(legend.position = "bottom",
panel.border = element_rect(colour = "grey", fill = NA)) +
guides(colour = guide_legend(nrow = 1)) + # put legend on one line
theme(legend.title = element_text(size = 9, face="bold"))
graphics.off() # close all open devices/windows
# calculate the regression results corresponding to the lines fitted in the figure
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Results.csv")
class(myDF)
class(MyDF)
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
#filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage, Location) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Loc_Results.csv")
View(MyDF)
# calculate the regression results corresponding to the lines fitted in the figure
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction, Location) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage, Location) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Loc_Results.csv")
# calculate the regression results corresponding to the lines fitted in the figure
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction, Location) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage, Location) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Loc_Results.csv")
################### Calculating a linear model for predator and prey masses ##########################
####################### by feeding type, predator lifestage and location #############################
# Calculates linear regression model for predator and prey masses separated by type of
# feeding interaction, predator lifestage, location and then saves as csv demlimited table.
# clear workspace
rm(list=ls())
# imports
library(ggplot2)
library(dplyr)
# load the data
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF) # check the size of the data frame you loaded
# calculate the regression results corresponding to the lines fitted in the figure
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
dplyr::select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction, Location) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage, Location) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
dplyr::select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Loc_Results.csv")
################### Calculating a linear model for predator and prey masses ##########################
####################### by feeding type, predator lifestage and location #############################
# Calculates linear regression model for predator and prey masses separated by type of
# feeding interaction, predator lifestage, location and then saves as csv demlimited table.
# clear workspace
rm(list=ls())
# imports
library(dplyr)
# load the data
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF) # check the size of the data frame you loaded
# calculate the regression results corresponding to the lines fitted in the figure
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
dplyr::select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction, Location) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage, Location) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
dplyr::select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Loc_Results.csv")
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
dplyr::select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
dplyr::select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Results.csv")
class(summary(mod))
class(mod)
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
dplyr::select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction, Location) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage, Location) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
dplyr::select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Loc_Results.csv")
class(mod)
mod
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
dplyr::select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction, Location) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage, Location) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = mod$coeff[2],
Regression.intercept = mod$coeff[1],
R.squared = mod$adj.r.squared,
Fstatistic = mod$fstatistic[1],
P.value = mod$coeff[8]) %>%
dplyr::select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Loc_Results.csv")
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
dplyr::select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction, Location) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage, Location) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = mod$coeff[2],
Regression.intercept = mod$coeff[1],
R.squared = mod$adj.r.squared,
Fstatistic = mod$fstatistic[1],
P.value = mod$coeff[8]) %>%
dplyr::select(-mod) # remove column created by mod=lm command
View(LM)
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
dplyr::select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction, Location) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage, Location) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
dplyr::select(-mod) # remove column created by mod=lm command
summary(mod)
################### Calculating a linear model for predator and prey masses ##########################
####################### by feeding type, predator lifestage and location #############################
# Calculates linear regression model for predator and prey masses separated by type of
# feeding interaction, predator lifestage, location and then saves as csv demlimited table.
# clear workspace
rm(list=ls())
# imports
library(dplyr)
# load the data
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF) # check the size of the data frame you loaded
# calculate the regression results corresponding to the lines fitted in the figure
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
dplyr::select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction, Location) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage, Location) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
dplyr::select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Loc_Results.csv")
################### Calculating a linear model for predator and prey masses #####################
############################ by feeding type and predator lifestage #############################
# Plots graphs from predator and prey size data, including linear regressions,
# differentiated by predator lifestage, facected by type of feeding interaction and saves to pdf.
# Calculates regression results corresponding to the lines fitted in the figure and saves as
# csv demlimited table.
# clear workspace
rm(list=ls())
# imports
library(ggplot2)
library(dplyr)
# load the data
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF) # check the size of the data frame you loaded
pdf("../Results/PP_Regress.pdf", # open blank pdf page using a relative path
8.3, 11.7)  # page dimensions in inches
# plot the predator and prey mass by feeding type and predator lifestage using the linear model method
qplot(Prey.mass, Predator.mass, data = MyDF, log="xy",
xlab = "Prey mass in grams",
ylab = "Predator mass in grams",
colour = Predator.lifestage, shape = I(3)) +
geom_smooth(method = "lm",fullrange = TRUE) + # plot linear regressions
facet_grid(Type.of.feeding.interaction~.) + # all plots on the same grid
theme_bw() %+replace%
theme(legend.position = "bottom",
panel.border = element_rect(colour = "grey", fill = NA)) +
guides(colour = guide_legend(nrow = 1)) + # put legend on one line
theme(legend.title = element_text(size = 9, face="bold"))
graphics.off() # close all open devices/windows
# calculate the regression results corresponding to the lines fitted in the figure
LM <- MyDF %>%
# first remove subset that contains only 2 examples, both with same species of prey and predator,
# because f-statistic can't be calculated on this (and no linear regression line can be drawn)
filter(Record.number != "30914" & Record.number != "30929") %>%
# subset only the data needed and group by feeeding type and predator lifestage
dplyr::select(Record.number, Predator.mass, Prey.mass, Predator.lifestage, Type.of.feeding.interaction) %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
# do linear model calculations and store specific values as columns to dataframe
do(mod=lm(Predator.mass ~ Prey.mass, data = .)) %>%
mutate(Regression.slope = summary(mod)$coeff[2],
Regression.intercept = summary(mod)$coeff[1],
R.squared = summary(mod)$adj.r.squared,
Fstatistic = summary(mod)$fstatistic[1],
P.value = summary(mod)$coeff[8]) %>%
dplyr::select(-mod) # remove column created by mod=lm command
# save the regression results to a csv delimited table
write.csv(LM, "../Results/PP_Regress_Results.csv")
help(commandArgs)
# This function calculates heights of trees given the distance
# of each tree from its base and angle to its top, using the
# trigonometric formula
# height = distance * tan(radians)
# Arguments:
# degrees: The angle of elevation of tree
# distance: The distance from base of tree (e.g. metres)
# Output:
# the heights of the trees, same units as "distance"
# loads data from a csv
Tree_data <- read.csv("../Data/trees.csv")
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
# commented out print function below to improve speed with large datasets
#print(paste("Tree height is", height))
return(height)
}
TreeHeight(37, 40) # sample values
# add column to Tree_data to include tree heights, calculated by the TreeHeight function
Tree_data$Tree.Height.m <- TreeHeight(Tree_data$Angle.degrees, Tree_data$Distance.m)
# write data to a csv
# write.csv(Tree_data, "../Results/TreeHts.csv")
# This function calculates heights of trees given the distance
# of each tree from its base and angle to its top, using the
# trigonometric formula
# height = distance * tan(radians)
# Arguments:
# degrees: The angle of elevation of tree
# distance: The distance from base of tree (e.g. metres)
# Output:
# the heights of the trees, same units as "distance"
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
# commented out print function below to improve speed with large datasets
#print(paste("Tree height is", height))
return(height)
}
args <- commandArgs(trailingOnly=TRUE)
print(args)
# This function calculates heights of trees given the distance
# of each tree from its base and angle to its top, using the
# trigonometric formula
# height = distance * tan(radians)
# Arguments:
# degrees: The angle of elevation of tree
# distance: The distance from base of tree (e.g. metres)
# Output:
# the heights of the trees, same units as "distance"
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
# commented out print function below to improve speed with large datasets
#print(paste("Tree height is", height))
return(height)
}
args <- commandArgs(trailingOnly=TRUE)
print(args)
for (args in args) {
if (length(args) == 1) {
Tree_data <- read.csv(args[1])
}
else {
Tree_data <- read.csv("../Data/trees.csv")
}
}
# This function calculates heights of trees given the distance
# of each tree from its base and angle to its top, using the
# trigonometric formula
# height = distance * tan(radians)
# Arguments:
# degrees: The angle of elevation of tree
# distance: The distance from base of tree (e.g. metres)
# Output:
# the heights of the trees, same units as "distance"
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
# commented out print function below to improve speed with large datasets
#print(paste("Tree height is", height))
return(height)
}
args <- commandArgs(trailingOnly=TRUE)
print(args)
for (args in args) {
if (length(args) == 1) {
Tree_data <- read.csv(args[1])
}
else {
Tree_data <- read.csv("../Data/trees.csv")
}
}
# add column to Tree_data to include tree heights, calculated by the TreeHeight function
Tree_data$Tree.Height.m <- TreeHeight(Tree_data$Angle.degrees, Tree_data$Distance.m)
# write data to a csv
write.csv(Tree_data, "../Results/TreeHts.csv")
source('~/Documents/CMEECourseWork/Week3/Code/get_TreeHeight.R')
