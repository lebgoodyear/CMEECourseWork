Parameters <- matrix(unlist(PowFitMM), ncol = 3, byrow = TRUE)
plot(Parameters[,1], Morph_Data1[,4:ncol])
PowFitMM <- list()
for (i in (1:ncol(Morph_Data1))) {
PowFitM <- nlsLM(BodyWeight ~ powMod(Morph_Data1[,i], a, b),
data = Morph_Data1,
start = list(a = .1, b = .1))
RSS <-  1 - ((sum(residuals(PowFitM)^2)) / (sum(Morph_Data1[,i]) - mean(Morph_Data1[,i]) ^ 2))
PowFitMM[[i]] <- list(coef(PowFitM)[1], coef(PowFitM)[2], RSS)
}
View(Morph_Data1)
View(Morph_Data)
View(Morph_Data)
Morph_Data <- Data2Fit[-c(1:6,16)]
# overview of all potential pairs of scaling relationships
pairs(Morph_Data)
# we can see that all pairs have a positive scaling relationship
PowFitMM <- list()
for (i in (4:ncol(Morph_Data))) {
PowFitM <- nlsLM(BodyWeight ~ powMod(Morph_Data[,i], a, b),
data = Morph_Data,
start = list(a = .1, b = .1))
RSS <-  1 - ((sum(residuals(PowFitM)^2)) / (sum(Morph_Data[,i]) - mean(Morph_Data[,i]) ^ 2))
PowFitMM[[i]] <- list(coef(PowFitM)[1], coef(PowFitM)[2], RSS)
}
Parameters <- matrix(unlist(PowFitMM), ncol = 3, byrow = TRUE)
plot(Parameters[,1], Morph_Data[,4:ncol])
plot(Parameters[,1], Morph_Data)
View(Parameters)
plot(Parameters[,1], Morph_Data[headers])
plot(Parameters[,1])
par(mfrow = c(1, 3))
plot(Parameters[,1])
plot(Parameters[,2])
plot(Parameters[,3])
Parameters <- dataframe(unlist(PowFitMM), ncol = 3, byrow = TRUE)
Parameters <- data.frame(unlist(PowFitMM), ncol = 3, byrow = TRUE)
colnames(Morph_Data)
colnames(Morph_Data)[4:]
colnames(Morph_Data)[4]
colnames(Morph_Data)[4:9]
plot(Parameters[,1],colnames(Morph_Data)[4:9])
plot(colnames(Morph_Data)[4:9], Parameters[,1])
Parameters[,1]
PowFitMM <- list()
for (i in (4:ncol(Morph_Data))) {
PowFitM <- nlsLM(BodyWeight ~ powMod(Morph_Data[,i], a, b),
data = Morph_Data,
start = list(a = .1, b = .1))
RSS <-  1 - ((sum(residuals(PowFitM)^2)) / (sum(Morph_Data[,i]) - mean(Morph_Data[,i]) ^ 2))
PowFitMM[[i]] <- list(coef(PowFitM)[1], coef(PowFitM)[2], RSS)
}
Parameters <- data.frame(unlist(PowFitMM), ncol = 3, byrow = TRUE)
View(PowFitMM)
View(PowFitM)
View(PowFit)
View(PowFitMM)
View(Parameters)
Parameters <- data.frame(unlist(PowFitMM))
View(Parameters)
View(PowFitMM)
Parameters <- data.frame(unlist(PowFitMM), ncol = 3)
View(Parameters)
powFitMM[1]
PowFitMM[1]
PowFitMM <- list()
for (i in (4:ncol(Morph_Data))) {
PowFitM <- nlsLM(BodyWeight ~ powMod(Morph_Data[,i], a, b),
data = Morph_Data,
start = list(a = .1, b = .1))
RSS <-  1 - ((sum(residuals(PowFitM)^2)) / (sum(Morph_Data[,i]) - mean(Morph_Data[,i]) ^ 2))
PowFitMM[[i]] <- list(coef(PowFitM)[1], coef(PowFitM)[2], RSS)
}
PowFitMM[1]
Parameters <- matrix(unlist(PowFitMM), ncol = 3, byrow = TRUE)
View(Parameters)
Parameters <- data.frame(matrix(unlist(PowFitMM), ncol = 3, byrow = TRUE))
View(Parameters)
data.frame()par(mfrow = c(1, 3))
plot(colnames(Morph_Data)[4:9], Parameters[,1])
plot(Parameters[,2])
plot(Parameters[,3])
par(mfrow = c(1, 3))
plot(colnames(Morph_Data)[4:9], Parameters[,1])
plot(Parameters[,2])
plot(Parameters[,3])
colnames(Morph_Data)[4:9]
barplot(x = colnames(Morph_Data)[4:9], Parameters[,1])
barplot(Parameters[,1], colnames(Morph_Data)[4:9])
barplot(Parameters[,1])
barplot(Parameters[,1], names.arg = colnames(Morph_Data)[4:9])
par(mfrow = c(1, 3))
barplot(Parameters[,1], names.arg = colnames(Morph_Data)[4:9])
plot(Parameters[,2])
plot(Parameters[,3])
par(mfrow = c(1, 3))
barplot(Parameters[,1], names.arg = colnames(Morph_Data)[4:9])
plot(Parameters[,2], names.arg = colnames(Morph_Data)[4:9])
plot(Parameters[,3], names.arg = colnames(Morph_Data)[4:9])
par(mfrow = c(1, 3))
barplot(Parameters[,1], names.arg = colnames(Morph_Data)[4:9])
barplot(Parameters[,2], names.arg = colnames(Morph_Data)[4:9])
barplot(Parameters[,3], names.arg = colnames(Morph_Data)[4:9])
par(mfrow = c(1, 3))
barplot(Parameters[,1],
names.arg = colnames(Morph_Data)[4:9],
main = 'Slope values')
barplot(Parameters[,2],
names.arg = colnames(Morph_Data)[4:9],
main = 'Intercept values')
barplot(Parameters[,3],
names.arg = colnames(Morph_Data)[4:9],
main = 'RSS values')
# use summary to see the values of the both models
summary(OLS_Fit)
View(Morph_Data)
# remove NA in Headlength
Morph_Data <- Morph_Data[!is.na(Data2Fit$Headlength),]
# overview of all potential pairs of scaling relationships
pairs(Morph_Data)
PowFitMM <- list()
for (i in (2:ncol(Morph_Data))) {
PowFitM <- nlsLM(BodyWeight ~ powMod(Morph_Data[,i], a, b),
data = Morph_Data,
start = list(a = .1, b = .1))
RSS <-  1 - ((sum(residuals(PowFitM)^2)) / (sum(Morph_Data[,i]) - mean(Morph_Data[,i]) ^ 2))
PowFitMM[[i]] <- list(coef(PowFitM)[1], coef(PowFitM)[2], RSS)
}
View(Morph_Data)
# remove NA in Headlength
Morph_Data <- Morph_Data[!is.na(Data2Fit$Headlength),]
# first for Anisoptera
Morph_Data <- Data2Fit[-c(1:6,16)]
View(Morph_Data)
# remove NA in Headlength
Morph_Data <- Morph_Data[!is.na(Morph_Data$Headlength),]
# overview of all potential pairs of scaling relationships
pairs(Morph_Data)
# overview of all potential pairs of scaling relationships
pairs(Morph_Data)
# overview of all potential pairs of scaling relationships
pairs(Morph_Data)
# first for Anisoptera
Morph_Data <- Data2Fit[-c(1:6,16)]
# overview of all potential pairs of scaling relationships
pairs(Morph_Data)
# remove NA in Headlength
Morph_Data <- Morph_Data[!is.na(Morph_Data$Headlength),]
PowFitMM <- list()
for (i in (2:ncol(Morph_Data))) {
PowFitM <- nlsLM(BodyWeight ~ powMod(Morph_Data[,i], a, b),
data = Morph_Data,
start = list(a = .1, b = .1))
RSS <-  1 - ((sum(residuals(PowFitM)^2)) / (sum(Morph_Data[,i]) - mean(Morph_Data[,i]) ^ 2))
PowFitMM[[i]] <- list(coef(PowFitM)[1], coef(PowFitM)[2], RSS)
}
# first for Anisoptera
Morph_Data <- Data2Fit[-c(1:6,16)]
# remove NA in Headlength
Morph_Data <- Morph_Data[!is.na(Morph_Data$Headlength),]
# first for Anisoptera
Morph_Data <- Data2Fit[-c(1:6,16)]
!is.na(Morph_Data$Headlength)
# remove NA in Headlength
Morph_Data <- Morph_Data[!is.na(Morph_Data$HeadLength),]
# first for Anisoptera
Morph_Data <- Data2Fit[-c(1:6,16)]
# remove NA in Headlength
Morph_Data <- Morph_Data[!is.na(Morph_Data$HeadLength),]
Morph_Data <- Data2Fit[-c(1:6,16)]
# remove NA in Headlength
Morph_Data <- Morph_Data[!is.na(Morph_Data$HeadLength),]
# overview of all potential pairs of scaling relationships
pairs(Morph_Data)
PowFitMM <- list()
for (i in (2:ncol(Morph_Data))) {
PowFitM <- nlsLM(BodyWeight ~ powMod(Morph_Data[,i], a, b),
data = Morph_Data,
start = list(a = .1, b = .1))
RSS <-  1 - ((sum(residuals(PowFitM)^2)) / (sum(Morph_Data[,i]) - mean(Morph_Data[,i]) ^ 2))
PowFitMM[[i]] <- list(coef(PowFitM)[1], coef(PowFitM)[2], RSS)
}
Parameters <- data.frame(matrix(unlist(PowFitMM), ncol = 3, byrow = TRUE))
par(mfrow = c(1, 3))
barplot(Parameters[,1],
names.arg = colnames(Morph_Data)[2:9],
main = 'Slope values')
barplot(Parameters[,2],
names.arg = colnames(Morph_Data)[2:9],
main = 'Intercept values')
barplot(Parameters[,3],
names.arg = colnames(Morph_Data)[2:9],
main = 'RSS values')
View(Parameters)
########## Model fitting example using Non-Linear Least Squares ############
# clear workspace
rm(list = ls())
graphics.off()
# load neccesary packages
library(repr)
library(minpack.lm) # for Levenberg-Marquardt nlls fitting
library(ggplot2)
#################### Allometric scaling of traits #########################
# create a function for the power law model
powMod <- function(x, a, b) {
return(a * x^b)
}
# load data
MyData <- read.csv("../Data/GenomeSize.csv")
# subset the data by Anisoptera and remove NAs
Data2Fit <- subset(MyData, Suborder == "Anisoptera")
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),] # remove NA's
# plot data
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
# or use ggplot to plot the data
ggplot(Data2Fit, aes(x = TotalLength,
y= BodyWeight)) +
geom_point(size = (3),
colour = "red") +
theme_bw() +
labs(y = "Body mass (mg)",
x = "Total length (mm)")
# fit the model to the data using NLLS
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b),
data = Data2Fit,
start = list(a = .1, b = .1))
# use summary to see the values of the model
summary(PowFit)
# not that further statistical inference cannot be done using ANOVA,
# like for a lm
## visualise the fit
# generate a vector of body length (x-axis variable) for plotting
Lengths <- seq(min(Data2Fit$TotalLength), max(Data2Fit$TotalLength), len=200)
# calculate the predicted line by extracting the coefficent from the
# model fit
coef(PowFit)["a"]
coef(PowFit)["b"]
# use power law function on lengths and model parameters
Predic2PlotPow <- powMod(Lengths, coef(PowFit)["a"], coef(PowFit)["b"])
# plot data and the fitted model line
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
lines(Lengths, Predic2PlotPow, col = 'blue', lwd = 2.5)
# calculate confidence intervals (CI) on the estimated parameters
# like we would in OLS fitting used for linear models
confint(PowFit)
# remember a coefficent's CI should not include 0 for it
# to be statistically signficant (different from 0)
### exercise a) plot the above graph in ggplot and add equation
ggplot(Data2Fit, aes(x = TotalLength,
y= BodyWeight)) +
geom_point(size = (3),
colour = "red") +
stat_function(fun = function(Lengths) powMod(Lengths, a = coef(PowFit)["a"], b = coef(PowFit)["b"]),
col = 'blue', lwd = 1.5) +
theme_bw() +
labs(y = "Body mass (mg)",
x = "Total length (mm)") +
geom_text(aes(x = 45, y = 0.25,
label = paste("Mass == (3.94e-6)*Length ^ 2.59")),
parse = TRUE, size = 3,
colour = "blue")
### exercise b) play with starting values to see if model fitting can be
### "broken" (until NLLS does not converge on a solution)
PowFitT <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b),
data = Data2Fit,
start = list(a = -10, b = 10))
summary(PowFitT)
coef(PowFitT)["a"]
coef(PowFitT)["b"]
Lengths <- seq(min(Data2Fit$TotalLength), max(Data2Fit$TotalLength), len=200)
Predic2PlotPowT <- powMod(Lengths, coef(PowFitT)["a"], coef(PowFitT)["b"])
# plot data and the fitted model line
ggplot(Data2Fit, aes(x = TotalLength,
y= BodyWeight)) +
geom_point(size = (3),
colour = "red") +
stat_function(fun = function(Lengths) powMod(Lengths, a = coef(PowFitT)["a"], b = coef(PowFitT)["b"]),
col = 'blue', lwd = 1.5) +
theme_bw() +
labs(y = "Body mass (mg)",
x = "Total length (mm)") +
geom_text(aes(x = 45, y = 0.25,
label = paste("Mass == (3.94e-6)*Length ^ 2.59")),
parse = TRUE, size = 3,
colour = "blue")
# infinity produced when a, b > 1000, causing error
# singular gradient matrix produced when a, b < -1000, causing error
# can't plot model line for a = -100, b = 100
# a = -10, b = 10 produces a plot with an exponential asymptote around 85,
# which doesn't fit the data
### exercise c) repeat model fitting for Zygoptera dataset
# subset the data by Zygoptera and remove NAs
Data2FitZ <- subset(MyData, Suborder == "Zygoptera")
Data2FitZ <- Data2FitZ[!is.na(Data2FitZ$TotalLength),] # remove NA's
# plot data
plot(Data2FitZ$TotalLength, Data2FitZ$BodyWeight)
# or use ggplot to plot the data
ggplot(Data2FitZ, aes(x = TotalLength,
y= BodyWeight)) +
geom_point(size = (3),
colour = "red") +
theme_bw() +
labs(y = "Body mass (mg)",
x = "Total length (mm)")
# fit the model to the data using NLLS
PowFitZ <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b),
data = Data2FitZ,
start = list(a = .01, b = .01))
# use summary to see the values of the model
summary(PowFitZ)
# not that further statistical inference cannot be done using ANOVA,
# like for a lm
## visualise the fit
# generate a vector of body length (x-axis variable) for plotting
LengthsZ <- seq(min(Data2FitZ$TotalLength), max(Data2FitZ$TotalLength), len=200)
# calculate the predicted line by extracting the coefficent from the
# model fit
coef(PowFitZ)["a"]
coef(PowFitZ)["b"]
# use power law function on lengths and model parameters
Predic2PlotPowZ <- powMod(LengthsZ, coef(PowFitZ)["a"], coef(PowFitZ)["b"])
# plot data and the fitted model line
plot(Data2FitZ$TotalLength, Data2FitZ$BodyWeight)
lines(LengthsZ, Predic2PlotPowZ, col = 'blue', lwd = 2.5)
# calculate confidence intervals (CI) on the estimated parameters
# like we would in OLS fitting used for linear models
confint(PowFitZ)
# remember a coefficent's CI should not include 0 for it
# to be statistically signficant (different from 0)
# c) exercise a) plot the above graph in ggplot and add equation
ggplot(Data2FitZ, aes(x = TotalLength,
y= BodyWeight)) +
geom_point(size = (3),
colour = "red") +
stat_function(fun = function(LengthsZ) powMod(LengthsZ, a = coef(PowFitZ)["a"], b = coef(PowFitZ)["b"]),
col = 'blue', lwd = 1.5) +
theme_bw() +
labs(y = "Body mass (mg)",
x = "Total length (mm)") +
geom_text(aes(x = 35, y = 0.03,
label = paste("Mass == (6.94e-8)*Length ^ 2.57")),
parse = TRUE, size = 3,
colour = "blue")
# c) exercise b) play with starting values to see if model fitting can be
# "broken" (until NLLS does not converge on a solution)
PowFitZT <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b),
data = Data2FitZ,
start = list(a = -10, b = 10))
summary(PowFitZT)
coef(PowFitZT)["a"]
coef(PowFitZT)["b"]
LengthsZT <- seq(min(Data2FitZ$TotalLength), max(Data2FitZ$TotalLength), len=200)
Predic2PlotPowZT <- powMod(LengthsZT, coef(PowFitZT)["a"], coef(PowFitZT)["b"])
# plot data and the fitted model line
ggplot(Data2FitZ, aes(x = TotalLength,
y= BodyWeight)) +
geom_point(size = (3),
colour = "red") +
stat_function(fun = function(LengthsZT) powMod(LengthsZT, a = coef(PowFitZT)["a"], b = coef(PowFitZT)["b"]),
col = 'blue', lwd = 1.5) +
theme_bw() +
labs(y = "Body mass (mg)",
x = "Total length (mm)") +
geom_text(aes(x = 45, y = 0.25,
label = paste("Mass == (3.94e-6)*Length ^ 2.59")),
parse = TRUE, size = 3,
colour = "blue")
# a = -10 and b = 10 gives a negative exponential with asymptote at 50,
# which does not fit data, as does a, b = 100 (although slope is much steeper)
# a = 1, b = 1 does not fit well, intercept is too high and slope is too shallow
### exercise d) use OLS method on bi-logarithamically transformed data
### and compare parameters with NLLS method
# log both side of allometric equation
# log(y) = log(a) + b.log(x)
# this equivalent to c = d + bz,
# where c = log(y), d = log(a), z = log(x) and b is the slope parameter
# perform an ordinary least squares linear regression
OLS_Fit <- lm(BodyWeight ~ TotalLength,
data = Data2Fit) # use Anisoptera data only
# use summary to see the values of the both models
summary(OLS_Fit)
summary(PowFit)
Morph_Data <- Data2Fit[-c(1:6,16)]
# remove NA in Headlength
Morph_Data <- Morph_Data[!is.na(Morph_Data$HeadLength),]
# overview of all potential pairs of scaling relationships
pairs(Morph_Data)
# we can see that all pairs have a positive scaling relationship
# note that running
PowFitMM <- list()
for (i in (2:ncol(Morph_Data))) { # include total length so we can compare to others
PowFitM <- nlsLM(BodyWeight ~ powMod(Morph_Data[,i], a, b),
data = Morph_Data,
start = list(a = .1, b = .1))
RSS <-  1 - ((sum(residuals(PowFitM)^2)) / (sum(Morph_Data[,i]) - mean(Morph_Data[,i]) ^ 2))
PowFitMM[[i]] <- list(coef(PowFitM)[1], coef(PowFitM)[2], RSS)
}
Parameters <- data.frame(matrix(unlist(PowFitMM), ncol = 3, byrow = TRUE))
par(mfrow = c(1, 3))
barplot(Parameters[,1],
names.arg = colnames(Morph_Data)[2:9],
main = 'Slope values')
barplot(Parameters[,2],
names.arg = colnames(Morph_Data)[2:9],
main = 'Intercept values')
barplot(Parameters[,3],
names.arg = colnames(Morph_Data)[2:9],
main = 'RSS values')
# From the plots above, we can see all models fit well (RSS are all close to 1) and
# the greatest variation is in the slope values, with thorax length having the greatest
# slope meaning a small change in thorax length gives a large change in body mass
View(Morph_Data)
View(Parameters)
View(Morph_Data)
# now do the same for Zygoptera
Morph_Data <- Data2FitZ[-c(1:6,16)]
# now do the same for Zygoptera
Morph_DataZ <- Data2FitZ[-c(1:6,16)]
View(Morph_DataZ)
# remove NA in ForewingLength
Morph_DataZ <- Morph_DataZ[!is.na(Morph_DataZ$ForewingLength),]
# overview of all potential pairs of scaling relationships
pairs(Morph_Data)
# overview of all potential pairs of scaling relationships
pairs(Morph_DataZ)
Z
# overview of all potential pairs of scaling relationships
pairs(Morph_DataZ)
Morph_DataZ <- Data2FitZ[-c(1:6,16)]
# remove NA in ForewingLength
Morph_DataZ <- Morph_DataZ[!is.na(Morph_DataZ$ForewingLength),]
# overview of all potential pairs of scaling relationships
pairs(Morph_DataZ)
# we can see that all pairs have a positive scaling relationship
# note that running
PowFitMMZ <- list()
for (i in (2:ncol(Morph_DataZ))) { # include total length so we can compare to others
PowFitMZ <- nlsLM(BodyWeight ~ powMod(Morph_DataZ[,i], a, b),
data = Morph_DataZ,
start = list(a = .1, b = .1))
RSS <-  1 - ((sum(residuals(PowFitMZ)^2)) / (sum(Morph_DataZ[,i]) - mean(Morph_DataZ[,i]) ^ 2))
PowFitMMZ[[i]] <- list(coef(PowFitMZ)[1], coef(PowFitMZ)[2], RSS)
}
ParametersZ <- data.frame(matrix(unlist(PowFitMMZ), ncol = 3, byrow = TRUE))
par(mfrow = c(1, 3))
barplot(ParametersZ[,1],
names.arg = colnames(Morph_DataZ)[2:9],
main = 'Values of a')
barplot(ParametersZ[,2],
names.arg = colnames(Morph_DataZ)[2:9],
main = 'Values of b')
barplot(ParametersZ[,3],
names.arg = colnames(Morph_DataZ)[2:9],
main = 'RSS values')
View(ParametersZ)
Morph_Data <- Data2Fit[-c(1:6,16)]
# remove NA in Headlength
Morph_Data <- Morph_Data[!is.na(Morph_Data$HeadLength),]
# overview of all potential pairs of scaling relationships
pairs(Morph_Data)
# we can see that all pairs have a positive scaling relationship
# note that running
PowFitMM <- list()
for (i in (2:ncol(Morph_Data))) { # include total length so we can compare to others
PowFitM <- nlsLM(BodyWeight ~ powMod(Morph_Data[,i], a, b),
data = Morph_Data,
start = list(a = .1, b = .1))
RSS <-  1 - ((sum(residuals(PowFitM)^2)) / (sum(Morph_Data[,i]) - mean(Morph_Data[,i]) ^ 2))
PowFitMM[[i]] <- list(coef(PowFitM)[1], coef(PowFitM)[2], RSS)
}
Parameters <- data.frame(matrix(unlist(PowFitMM), ncol = 3, byrow = TRUE))
colnames(Parameters) = c("a", "b", "RSS")
par(mfrow = c(1, 3))
barplot(Parameters[,1],
names.arg = colnames(Morph_Data)[2:9],
main = 'Values of a')
barplot(Parameters[,2],
names.arg = colnames(Morph_Data)[2:9],
main = 'Values of b')
barplot(Parameters[,3],
names.arg = colnames(Morph_Data)[2:9],
main = 'RSS values')
View(Parameters)
Morph_DataZ <- Data2FitZ[-c(1:6,16)]
# remove NA in ForewingLength
Morph_DataZ <- Morph_DataZ[!is.na(Morph_DataZ$ForewingLength),]
# overview of all potential pairs of scaling relationships
pairs(Morph_DataZ)
# we can see that all pairs have a positive scaling relationship
# note that running
PowFitMMZ <- list()
for (i in (2:ncol(Morph_DataZ))) { # include total length so we can compare to others
PowFitMZ <- nlsLM(BodyWeight ~ powMod(Morph_DataZ[,i], a, b),
data = Morph_DataZ,
start = list(a = .1, b = .1))
RSS <-  1 - ((sum(residuals(PowFitMZ)^2)) / (sum(Morph_DataZ[,i]) - mean(Morph_DataZ[,i]) ^ 2))
PowFitMMZ[[i]] <- list(coef(PowFitMZ)[1], coef(PowFitMZ)[2], RSS)
}
ParametersZ <- data.frame(matrix(unlist(PowFitMMZ), ncol = 3, byrow = TRUE))
colnames(ParametersZ) = c("a", "b", "RSS")
par(mfrow = c(1, 3))
barplot(ParametersZ[,1],
names.arg = colnames(Morph_DataZ)[2:9],
main = 'Values of a')
barplot(ParametersZ[,2],
names.arg = colnames(Morph_DataZ)[2:9],
main = 'Values of b')
barplot(ParametersZ[,3],
names.arg = colnames(Morph_DataZ)[2:9],
main = 'RSS values')
View(ParametersZ)
library(tcltk)
