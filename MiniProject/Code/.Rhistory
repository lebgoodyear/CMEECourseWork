print(qplot(x = p$ResDensity, y = p$N_TraitValue,
xlab = "Resource Density", ylab = "Trait Value",
main = paste("ID", i)) +
geom_point())
}
dev.off()
a <- rnorm(1, mean = start_a, sd = 1)
# calculate initial starting value estimates for parameters
for (i in IDs) {
# subset data by ID
subs <- subset(crd, crd$ID == i)
# subset further to find the values lower than mean to estimate slope
sub_a <- subset(subs, subs$N_TraitValue < mean(subs$N_TraitValue))
find_a <- try(summary(lm(N_TraitValue ~ ResDensity, data = sub_a)))
start_a <- find_a$coefficients[2]
# re-subset to find the values higher than the mean to estimate maximum
sub_h <- subset(subs, subs$N_TraitValue > mean(subs$N_TraitValue))
start_h <- max(sub_h$N_TraitValue)
# add starting values to dataframe
for (j in (which(crd$ID == i))) {
crd$initial_a[j] <- start_a
crd$initial_h[j] <- start_h
}
}
# save subsetted data to new csv to be imported by python
write.csv(crd, "../Data/CRatMod.csv")
# read csv (more easily viewed in rstudio)
crd <- read.csv("../Data/CRat.csv", stringsAsFactors = F)
# subset by relelvant data columns
crd <- as.data.frame(cbind(crd$ID, crd$N_TraitValue, crd$ResDensity))
names(crd) <- c("ID", "N_TraitValue", "ResDensity")
qplot(x = crd$ResDensity, y = crd$N_TraitValue, colour = crd$ID,
xlab = "Resource Density", ylab = "Trait Value") +
geom_point()
x <- as.data.frame(matrix())
IDs_Count <- as.data.frame(table(crd$ID))
IDs <- as.numeric(levels(IDs_Count$Var1))[IDs_Count$Var1]
for (i in (1:length(IDs))) {
if (IDs_Count[i,2] < 5) {
x <- rbind(x, IDs[i])
}
}
if (is.null(x)) {
print("The following IDs contain fewer than 5 records so are not suitable for modelling", x)
} else {
print("There are no IDs with fewer than 5 records so all IDs can be used for modelling")
}
for (i in IDs) {
# subset data by ID
subs <- subset(crd, crd$ID == i)
# subset further to find the values lower than mean to estimate slope
sub_a <- subset(subs, subs$N_TraitValue < mean(subs$N_TraitValue))
find_a <- try(summary(lm(N_TraitValue ~ ResDensity, data = sub_a)))
start_a <- find_a$coefficients[2]
# re-subset to find the values higher than the mean to estimate maximum
sub_h <- subset(subs, subs$N_TraitValue > mean(subs$N_TraitValue))
start_h <- max(sub_h$N_TraitValue)
# add starting values to dataframe
for (j in (which(crd$ID == i))) {
crd$initial_a[j] <- start_a
crd$initial_h[j] <- start_h
}
}
View(crd)
for (i in IDs) {
# subset data by ID
subs <- subset(crd, crd$ID == 6)
# subset further to find the values lower than mean to estimate slope
sub_a <- subset(subs, subs$N_TraitValue < mean(subs$N_TraitValue))
find_a <- try(summary(lm(N_TraitValue ~ ResDensity, data = sub_a)))
start_a <- find_a$coefficients[2]
# re-subset to find the values higher than the mean to estimate maximum
sub_h <- subset(subs, subs$N_TraitValue > mean(subs$N_TraitValue))
start_h <- max(sub_h$N_TraitValue)
# add starting values to dataframe
for (j in (which(crd$ID == i))) {
crd$initial_a[j] <- start_a
crd$initial_h[j] <- start_h
}
}
try-error
for (i in IDs) {
# subset data by ID
subs <- subset(crd, crd$ID == 6)
# subset further to find the values lower than mean to estimate slope
sub_a <- subset(subs, subs$N_TraitValue < mean(subs$N_TraitValue))
find_a <- try(summary(lm(N_TraitValue ~ ResDensity, data = sub_a)))
start_a <- find_a$coefficients[2]
# re-subset to find the values higher than the mean to estimate maximum
sub_h <- subset(subs, subs$N_TraitValue > mean(subs$N_TraitValue))
start_h <- max(sub_h$N_TraitValue)
# add starting values to dataframe
for (j in (which(crd$ID == i))) {
crd$initial_a[j] <- start_a
crd$initial_h[j] <- start_h
}
}
subs
# subset further to find the values lower than mean to estimate slope
sub_a <- subset(subs, subs$N_TraitValue < mean(subs$N_TraitValue))
find_a <- try(summary(lm(N_TraitValue ~ ResDensity, data = sub_a)))
start_a <- find_a$coefficients[2]
# re-subset to find the values higher than the mean to estimate maximum
sub_h <- subset(subs, subs$N_TraitValue > mean(subs$N_TraitValue))
start_h <- max(sub_h$N_TraitValue)
for (j in (which(crd$ID == i))) {
crd$initial_a[j] <- start_a
crd$initial_h[j] <- start_h
}
for (j in (which(crd$ID == 6))) {
crd$initial_a[j] <- start_a
crd$initial_h[j] <- start_h
}
crd$initial_a[1]
start_a
which(crd$ID == 6
)
crd$initial_a[4304] <- start_a
for (i in (unique(crd$ID))) {
# subset data by ID
subs <- subset(crd, crd$ID == i)
# subset further to find the values lower than mean to estimate slope
sub_a <- subset(subs, subs$N_TraitValue < mean(subs$N_TraitValue))
find_a <- try(summary(lm(N_TraitValue ~ ResDensity, data = sub_a)))
start_a <- find_a$coefficients[2]
# re-subset to find the values higher than the mean to estimate maximum
sub_h <- subset(subs, subs$N_TraitValue > mean(subs$N_TraitValue))
start_h <- max(sub_h$N_TraitValue)
# add starting values to dataframe
for (j in (which(crd$ID == i))) {
crd$initial_a[j] <- start_a
crd$initial_h[j] <- start_h
}
}
View(crd)
# save subsetted data to new csv to be imported by python
write.csv(crd, "../Data/CRatMod.csv")
View(crd)
for (i in (unique(crd$ID))) {
# subset data by ID
subs <- subset(crd, crd$ID == i)
# subset further to find the values lower than mean to estimate slope
sub_a <- subset(subs, subs$N_TraitValue < mean(subs$N_TraitValue))
find_a <- try(summary(lm(N_TraitValue ~ ResDensity, data = sub_a)))
start_a <- find_a$coefficients[2]
# re-subset to find the values higher than the mean to estimate maximum
sub_h <- subset(subs, subs$N_TraitValue > mean(subs$N_TraitValue))
start_h <- max(sub_h$N_TraitValue)
# add starting values to dataframe
for (j in (which(crd$ID == i))) {
crd$initial_a[j] <- start_a
crd$initial_h[j] <- start_h
}
}
subs <- subset(crd, crd$ID == 3)
sub_a <- subset(subs, subs$N_TraitValue < mean(subs$N_TraitValue))
sub_a
# read csv (more easily viewed in rstudio)
crd <- read.csv("../Data/CRat.csv", stringsAsFactors = F)
crd <- subset(crd, !is.na(crd$N_TraitValue)) # remove any NAs
# subset by relelvant data columns
crd <- as.data.frame(cbind(crd$ID, crd$N_TraitValue, crd$ResDensity))
names(crd) <- c("ID", "N_TraitValue", "ResDensity")
subs <- subset(crd, crd$ID == 3)
# subset further to find the values lower than mean to estimate slope
sub_a <- subset(subs, subs$N_TraitValue < mean(subs$N_TraitValue))
sub_a
# read csv (more easily viewed in rstudio)
crd <- read.csv("../Data/CRat.csv", stringsAsFactors = F)
crd <- subset(crd, !is.na(crd$N_TraitValue)) # remove any NAs
# subset by relelvant data columns
crd <- as.data.frame(cbind(crd$ID, crd$N_TraitValue, crd$ResDensity))
names(crd) <- c("ID", "N_TraitValue", "ResDensity")
for (i in (unique(crd$ID))) {
# subset data by ID
subs <- subset(crd, crd$ID == i)
# subset further to find the values lower than mean to estimate slope
sub_a <- subset(subs, subs$N_TraitValue < 1.5*(mean(subs$N_TraitValue)))
find_a <- try(summary(lm(N_TraitValue ~ ResDensity, data = sub_a)))
start_a <- find_a$coefficients[2]
# re-subset to find the values higher than the mean to estimate maximum
sub_h <- subset(subs, subs$N_TraitValue > mean(subs$N_TraitValue))
start_h <- max(sub_h$N_TraitValue)
# add starting values to dataframe
for (j in (which(crd$ID == i))) {
crd$initial_a[j] <- start_a
crd$initial_h[j] <- start_h
}
}
View(crd)
# save subsetted data to new csv to be imported by python
write.csv(crd, "../Data/CRatMod.csv")
fits <- read.csv("../Data/crd_fits_GFR")
View(fits)
################# PLotting Data and Fits ####################
# load packages
library(ggplot2)
# define Holling function to plotting
GFR <- function (a, q, h, x) {
return (a * (x ^ (q + 1)) / (1 + h * a * (x) ^ (q + 1)))
}
fits <- read.csv("../Data/crd_fits_GFR")
fits <- subset(fits, !is.na(fits$Fit_a))
# check which datasets had no polynomial fitted
# nofits <- subset(fits, is.na(fits$Fit_a))
#for (i in dropd_IDs) {
#dropd_IDs <- c(unique(nofits$ID))
#  p <- subset(nofits, nofits$ID == i) # subset and plot the data by ID
#  print(qplot(x = p$log_ResDensity, y = p$log_N_TraitValue,
#              xlab = "log of Resource Density", ylab = "Log of Trait Value",
#              main = paste("ID", i)) +
#        geom_point())
#}
# viewing these datasets, it is unsurprising that a polynomial could not be fitted
IDs <- c(unique(fits$ID))
pdf(paste("../Results/Explore_Plots/polyIDs.pdf"),
8, 4.5, onefile = TRUE) # save all plots to one pdf
for (i in IDs) {
p <- subset(fits, fits$ID == i) # subset and plot the data by ID
x <- seq(min(p$log_ResDensity), max(p$log_ResDensity), 0.1)
y <- GFR(p$Fit_a[1], p$Fit_q[1], p$Fit_h[1], x)
data_to_plot <- data.frame(x, y)
print(ggplot(aes(x = log_ResDensity,
y = log_N_TraitValue),
data = p) +
xlab("Resource Density") +
ylab("Trait Value") +
ggtitle(paste("ID", i)) +
geom_point() +
geom_line(data = data_to_plot,
mapping = aes(x, y)))
}
dev.off()
################# PLotting Data and Fits ####################
# load packages
library(ggplot2)
# define Holling function to plotting
GFR <- function (a, q, h, x) {
return (a * (x ^ (q + 1)) / (1 + h * a * (x) ^ (q + 1)))
}
fits <- read.csv("../Data/crd_fits_GFR")
fits <- subset(fits, !is.na(fits$Fit_a))
# check which datasets had no polynomial fitted
# nofits <- subset(fits, is.na(fits$Fit_a))
#for (i in dropd_IDs) {
#dropd_IDs <- c(unique(nofits$ID))
#  p <- subset(nofits, nofits$ID == i) # subset and plot the data by ID
#  print(qplot(x = p$log_ResDensity, y = p$log_N_TraitValue,
#              xlab = "log of Resource Density", ylab = "Log of Trait Value",
#              main = paste("ID", i)) +
#        geom_point())
#}
# viewing these datasets, it is unsurprising that a polynomial could not be fitted
IDs <- c(unique(fits$ID))
pdf(paste("../Results/Explore_Plots/polyIDs.pdf"),
8, 4.5, onefile = TRUE) # save all plots to one pdf
for (i in IDs) {
p <- subset(fits, fits$ID == i) # subset and plot the data by ID
x <- seq(min(p$ResDensity), max(p$ResDensity), 0.1)
y <- GFR(p$Fit_a[1], p$Fit_q[1], p$Fit_h[1], x)
data_to_plot <- data.frame(x, y)
print(ggplot(aes(x = log_ResDensity,
y = log_N_TraitValue),
data = p) +
xlab("Resource Density") +
ylab("Trait Value") +
ggtitle(paste("ID", i)) +
geom_point() +
geom_line(data = data_to_plot,
mapping = aes(x, y)))
}
dev.off()
################# PLotting Data and Fits ####################
# load packages
library(ggplot2)
# define Holling function to plotting
GFR <- function (a, q, h, x) {
return (a * (x ^ (q + 1)) / (1 + h * a * (x) ^ (q + 1)))
}
fits <- read.csv("../Data/crd_fits_GFR")
fits <- subset(fits, !is.na(fits$Fit_a))
# check which datasets had no polynomial fitted
# nofits <- subset(fits, is.na(fits$Fit_a))
#for (i in dropd_IDs) {
#dropd_IDs <- c(unique(nofits$ID))
#  p <- subset(nofits, nofits$ID == i) # subset and plot the data by ID
#  print(qplot(x = p$log_ResDensity, y = p$log_N_TraitValue,
#              xlab = "log of Resource Density", ylab = "Log of Trait Value",
#              main = paste("ID", i)) +
#        geom_point())
#}
# viewing these datasets, it is unsurprising that a polynomial could not be fitted
IDs <- c(unique(fits$ID))
pdf(paste("../Results/Explore_Plots/polyIDs.pdf"),
8, 4.5, onefile = TRUE) # save all plots to one pdf
for (i in IDs) {
p <- subset(fits, fits$ID == i) # subset and plot the data by ID
x <- seq(min(p$ResDensity), max(p$ResDensity), 0.1)
y <- GFR(p$Fit_a[1], p$Fit_q[1], p$Fit_h[1], x)
data_to_plot <- data.frame(x, y)
print(ggplot(aes(x = ResDensity,
y = N_TraitValue),
data = p) +
xlab("Resource Density") +
ylab("Trait Value") +
ggtitle(paste("ID", i)) +
geom_point() +
geom_line(data = data_to_plot,
mapping = aes(x, y)))
}
dev.off()
fits <- read.csv("../Data/crd_fits_GFR.csv")
View(fits)
return (a * (x ^ (q + 1)) / (1 + h * a * (x) ^ (q + 1)))
View(fits)
################# PLotting Data and Fits ####################
# load packages
library(ggplot2)
# define Holling function to plotting
GFR <- function (a, q, h, x) {
return (a * (x ^ (q + 1)) / (1 + h * a * (x) ^ (q + 1)))
}
fits <- read.csv("../Data/crd_fits_GFR.csv")
fits <- subset(fits, !is.na(fits$Fit_a))
# check which datasets had no polynomial fitted
# nofits <- subset(fits, is.na(fits$Fit_a))
#for (i in dropd_IDs) {
#dropd_IDs <- c(unique(nofits$ID))
#  p <- subset(nofits, nofits$ID == i) # subset and plot the data by ID
#  print(qplot(x = p$log_ResDensity, y = p$log_N_TraitValue,
#              xlab = "log of Resource Density", ylab = "Log of Trait Value",
#              main = paste("ID", i)) +
#        geom_point())
#}
# viewing these datasets, it is unsurprising that a polynomial could not be fitted
IDs <- c(unique(fits$ID))
pdf(paste("../Results/Explore_Plots/polyIDs.pdf"),
8, 4.5, onefile = TRUE) # save all plots to one pdf
for (i in IDs) {
p <- subset(fits, fits$ID == i) # subset and plot the data by ID
x <- seq(min(p$ResDensity), max(p$ResDensity), (max(p$ResDensity) - min(p$ResDensity))/1000)
y <- GFR(p$Fit_a[1], p$Fit_q[1], p$Fit_h[1], x)
data_to_plot <- data.frame(x, y)
print(ggplot(aes(x = ResDensity,
y = N_TraitValue),
data = p) +
xlab("Resource Density") +
ylab("Trait Value") +
ggtitle(paste("ID", i)) +
geom_point() +
geom_line(data = data_to_plot,
mapping = aes(x, y)))
x <- seq(min(p$ResDensity), max(p$ResDensity), (max(p$ResDensity) - min(p$ResDensity))/1000)
################# PLotting Data and Fits ####################
# load packages
library(ggplot2)
# define Holling function to plotting
GFR <- function (a, q, h, x) {
return (a * (x ^ (q + 1)) / (1 + h * a * (x) ^ (q + 1)))
}
fits <- read.csv("../Data/crd_fits_GFR.csv")
fits <- subset(fits, !is.na(fits$Fit_a))
# check which datasets had no polynomial fitted
# nofits <- subset(fits, is.na(fits$Fit_a))
#for (i in dropd_IDs) {
#dropd_IDs <- c(unique(nofits$ID))
#  p <- subset(nofits, nofits$ID == i) # subset and plot the data by ID
#  print(qplot(x = p$log_ResDensity, y = p$log_N_TraitValue,
#              xlab = "log of Resource Density", ylab = "Log of Trait Value",
#              main = paste("ID", i)) +
#        geom_point())
#}
# viewing these datasets, it is unsurprising that a polynomial could not be fitted
IDs <- c(unique(fits$ID))
pdf(paste("../Results/Explore_Plots/GFRIDs.pdf"),
8, 4.5, onefile = TRUE) # save all plots to one pdf
for (i in IDs) {
p <- subset(fits, fits$ID == i) # subset and plot the data by ID
x <- seq(min(p$ResDensity), max(p$ResDensity), (max(p$ResDensity) - min(p$ResDensity))/1000)
y <- GFR(p$Fit_a[1], p$Fit_q[1], p$Fit_h[1], x)
data_to_plot <- data.frame(x, y)
print(ggplot(aes(x = ResDensity,
y = N_TraitValue),
data = p) +
xlab("Resource Density") +
ylab("Trait Value") +
ggtitle(paste("ID", i)) +
geom_point() +
geom_line(data = data_to_plot,
mapping = aes(x, y)))
}
dev.off()
################# PLotting Data and Fits ####################
# load packages
library(ggplot2)
# define Holling function to plotting
GFR <- function (a, q, h, x) {
return (a * (x ^ (q + 1)) / (1 + h * a * (x) ^ (q + 1)))
}
fits <- read.csv("../Data/crd_fits_GFR.csv")
fits <- subset(fits, !is.na(fits$Fit_a))
# check which datasets had no polynomial fitted
# nofits <- subset(fits, is.na(fits$Fit_a))
#for (i in dropd_IDs) {
#dropd_IDs <- c(unique(nofits$ID))
#  p <- subset(nofits, nofits$ID == i) # subset and plot the data by ID
#  print(qplot(x = p$log_ResDensity, y = p$log_N_TraitValue,
#              xlab = "log of Resource Density", ylab = "Log of Trait Value",
#              main = paste("ID", i)) +
#        geom_point())
#}
# viewing these datasets, it is unsurprising that a polynomial could not be fitted
IDs <- c(unique(fits$ID))
pdf(paste("../Results/Explore_Plots/GFRIDs.pdf"),
8, 4.5, onefile = TRUE) # save all plots to one pdf
for (i in IDs) {
p <- subset(fits, fits$ID == i) # subset and plot the data by ID
x <- seq(min(p$ResDensity), max(p$ResDensity), (max(p$ResDensity) - min(p$ResDensity))/1000)
y <- GFR(p$Fit_a[1], p$Fit_q[1], p$Fit_h[1], x)
data_to_plot <- data.frame(x, y)
print(ggplot(aes(x = ResDensity,
y = N_TraitValue),
data = p) +
xlab("Resource Density") +
ylab("Trait Value") +
ggtitle(paste("ID", i)) +
geom_point() +
geom_line(data = data_to_plot,
mapping = aes(x, y)))
}
dev.off()
View(fits)
################# PLotting Data and Fits ####################
# load packages
library(ggplot2)
# define Holling function to plotting
#Holling <- function (a, q, h, x) {
#  return (a * (x ^ (q + 1)) / (1 + h * a * (x) ^ (q + 1)))
#}
fits <- read.csv("../Data/crd_polyfits")
fits <- subset(fits, !is.na(fits$Poly1))
# check which datasets had no polynomial fitted
#nofits <- subset(fits, is.na(fits$Poly1))
#for (i in dropd_IDs) {
#dropd_IDs <- c(unique(nofits$ID))
#  p <- subset(nofits, nofits$ID == i) # subset and plot the data by ID
#  print(qplot(x = p$log_ResDensity, y = p$log_N_TraitValue,
#              xlab = "log of Resource Density", ylab = "Log of Trait Value",
#              main = paste("ID", i)) +
#        geom_point())
#}
# viewing these datasets, it is unsurprising that a polynomial could not be fitted
IDs <- c(unique(fits$ID))
pdf(paste("../Results/Explore_Plots/polyIDs.pdf"),
8, 4.5, onefile = TRUE) # save all plots to one pdf
for (i in IDs) {
p <- subset(fits, fits$ID == i) # subset and plot the data by ID
x <- seq(min(p$ResDensity), max(p$ResDensity), (max(p$ResDensity) - min(p$ResDensity))/1000)
y <- p$Poly4[1] + p$Poly3[1]*x +
p$Poly2[1]*x^2 + (p$Poly1[1])*x^3
data_to_plot <- data.frame(x, y)
print(ggplot(aes(x = ResDensity,
y = N_TraitValue),
data = p) +
xlab("Resource Density") +
ylab("Trait Value") +
ggtitle(paste("ID", i)) +
geom_point() +
geom_line(data = data_to_plot,
mapping = aes(x, y)))
}
dev.off()
################# PLotting Data and Fits ####################
# load packages
library(ggplot2)
# define Holling function to plotting
#Holling <- function (a, q, h, x) {
#  return (a * (x ^ (q + 1)) / (1 + h * a * (x) ^ (q + 1)))
#}
fits <- read.csv("../Data/crd_polyfits")
fits <- subset(fits, !is.na(fits$Poly1))
# check which datasets had no polynomial fitted
#nofits <- subset(fits, is.na(fits$Poly1))
#for (i in dropd_IDs) {
#dropd_IDs <- c(unique(nofits$ID))
#  p <- subset(nofits, nofits$ID == i) # subset and plot the data by ID
#  print(qplot(x = p$log_ResDensity, y = p$log_N_TraitValue,
#              xlab = "log of Resource Density", ylab = "Log of Trait Value",
#              main = paste("ID", i)) +
#        geom_point())
#}
# viewing these datasets, it is unsurprising that a polynomial could not be fitted
IDs <- c(unique(fits$ID))
pdf(paste("../Results/Explore_Plots/polyIDs.pdf"),
8, 4.5, onefile = TRUE) # save all plots to one pdf
for (i in IDs) {
p <- subset(fits, fits$ID == i) # subset and plot the data by ID
x <- seq(min(p$ResDensity), max(p$ResDensity), (max(p$ResDensity) - min(p$ResDensity))/1000)
y <- p$Poly4[1] + p$Poly3[1]*x +
p$Poly2[1]*x^2 + (p$Poly1[1])*x^3
data_to_plot <- data.frame(x, y)
print(ggplot(aes(x = ResDensity,
y = N_TraitValue),
data = p) +
xlab("Resource Density") +
ylab("Trait Value") +
ggtitle(paste("ID", i)) +
geom_point() +
geom_line(data = data_to_plot,
mapping = aes(x, y)))
}
dev.off()
