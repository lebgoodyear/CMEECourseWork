Starting weekly assessment for Lucy, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 87.70 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, C(Week10), Week8, Week5, Week2, Week9, Week4, .git, Week3, MiniProject

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp 
*.DS_Store
Week6/Lectures
MiniProject/References
Ecological_Modelling
SeminarDiary.tex
*.log
*-concordance.tex
*.gz
.Rhistory
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# CMEE Coursework Repository 2019-2020

*Author: Lucy Goodyear*  
*Created: 10/10/19*  
*Last updated: 04/02/20*

This repository contains all the coursework for the first term of the CMEE Master's course. Each of the main directories contains its own readme detailing the subdirectories, the system requirements to run each script and a description of the contents of each script.

Note that the **C(Week10)** directory does not have the same nomenclature as the other teaching weeks because it is a non-compulsory course for MRes students.

## Table of Contents
1. [Week 1 UNIX and shell scripting](#1.Week-1-UNIX-and-bash-scripting)
2. [Week 2 Python I](#2.Week-2-Python-I)
3. [Week 3 R](#3.Week-3-R)
4. [Week 4 Stats](#4.Week-4-Stats)
5. [Week 5 Modelling and GIS](#5.Week-5-Modelling-and-GIS)
6. [Week 6 Genomics](#6.Week-6-Genomics) 
7. [Week 7 Python II](#7.Week-7-Python-II)
8. [Week 8 MiniProject](#8.Week-8-MiniProject)
9. [Week 9 HPC](#9.Week-9-HPC)
10. [C (Week 10)](#10.C-(Week-10))
11. [MiniProject](#11.Miniproject)
12. [Assessment](#12.Assessment)

### 1. Week 1: UNIX and shell scripting

* FASTA exercise called UnixPrac1.txt
* Simple bash scripts, inlcuding:
    * Counting lines in a file
    * Concatenating the contents of two files
    * Converting tiff to png
    * Converting tab to csv and csv to txt
* LaTeX exercises

### 2. Week 2: Python I

*  Practice scripts exemplifying:
    * types of objects
    * basic functions
    * loops
    * list comprehensions
    * sys.argv
    * control flows
* Practical programming exercises and extra credit

### 3. Week 3: R

* Practice scripts exemplifying:
    * control flows
    * breaks
    * vectorisation
    * preallocation
    * debugging
    * data wrangling
    * plotting using base R, qplot and ggplot
* practical programming exercises

### 4. Week 4: Stats

This directory is empty, created for file structure continuity.

### 5. Week 5: Modelling and GIS

* Four modelling scripts focusing on non-linear least squares
* One GIS script containing GIS practical work

### 6. Week 6: Genomics

* Four scripts: 
    * practical on allele and genotype frequencies
    * practical on on genetic drift, mutation and divergence
    * practical on coalescence theory
    * practical on population subdivision and demographic inferences

### 7. Week 7: Python II

* Practice scripts on profiling
* 4 scripts modeling the Lotka-Voltera system:
    * numerical integration version
    * numerical integration version with carrying capacity
    * discrete time version
    * discrete time steps version with random gaussian fluctuation
* Practicals on visualsing networks
* Practice scripts using regular expressions
* Practice scripts running R scripts from python and accessing command line functions through python

### 8. Week 8: MiniProject

This directory is empty, created for file structure continuity. See MiniProject folder for work done during this week.

### 9. Week 9: HPC

* Main .R script containing all HPC functions on neutral theory and fracals
* Test .R script, which sources the main script and contains suitable parameters to test the functions.
* Cluster .R script which contains the code to be run on the cluster
* A bash script to manage the cluster queue
* Self-sufficient R script containing the answer to question 30 in as few characters as possible

### 10. C (Week 10)

All scripts from C week.

### 11. MiniProject

Work-in-progress scripts for my MiniProject.

### 12. Assessment

Directory for Course Director to push assessment results.**********************************************************************

======================================================================
Looking for the weekly directories...

Found 10 weekly directories: C(Week10), Week1, Week2, Week3, Week4, Week5, Week6, Week7, Week8, Week9

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing C(WEEK10)...

Found the following directories: Code

Found the following files: README.md, C_Week_Notes.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# CMEE Coursework C Week Repository

*Author: Lucy Goodyear*  
*Created: 05/12/19*

This repository contains all the CMEE coursework from Week 10 on C.

This is not a compulsory course for MRes so is not included with the other weeks.

**Code** contains the scripts/programs.

The **TreeLib** directory within **Code** contains the initial header files
and C script to make a library that contains all the functions needed for 
generating phylogenetic trees.

C_Week_Notes.md is a markdown file of notes I have made during the lectures.

## Requirements

A compiler for the C programming language.

All code has been created for Mac so there may be a few differences in commands with respect to Linux.

## List of scripts
1. hello
2. var1
3. vars2
4. ranges
5. operators
6. bitwise
7. dna
8. pointers
9. pointers_to_arrays
10. pointers_ret
11. composite_data_types
12. safearray
13. malloc_calloc
14. test_tree
15. countprimes
16. countprimes (header file)
17. Rcprimes


## Script content

The above C scripts ecover the following C concepts:
- basic C structure
- data types
- variables
- operators
- bitwise operations
- loops and functions
- pointers
- using structs
- safe programming
- assigning and freeing memory
- header files
- script to test files in the TreeLib subdirectory
- R wrappers

**********************************************************************

Data directory missing!

Results directory missing!

Creating Results directory...

Found 0 code files: 

Found the following extra files: node.c, tree.h, node.h, tree.c
0.5 pt deducted per extra file

Current Points = 98.0

======================================================================
Testing script/code files...

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
Assessing WEEK1...

Found the following directories: Code, sandbox, Data, Results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# CMEE Coursework Week 1 Repository

*Author: Lucy Goodyear*  
*Created: 10/10/19*

This repository contains all the CMEE coursework from Week 1, covering bash scripting, LaTeX and Git, and includes the following directories:

**Code** contains the scripts/programs.

**Data** is the data needed to run those scripts.

**Results** is where the outpout from those scripts is sent to.

**Sandbox** is a miscellaneous directory containing experimental code and data.

## Requirements

All code has been created for Mac so there may be a few differences in commands with respect to Linux. MacTeX or equivalent is required for LaTeX related files and imagemagick is needed for the tiff2png script to run.


## List of scripts
1. [UnixPrac1](#1.-UnixPrac1)
2. [boilerplate](#2.-boilerplate)
3. [tabtocsv](#3.-tabtocsv)
4. [variables](#4.-variables)
5. [MyExampleScript](#5.-MyExampleScript)
6. [Countlines](#6.-CountLines)
7. [ConcatenateTwoFiles](#7.-ConcatenateTwoFiles)
8. [tiff2png](#8.-tiff2png)
9. [csvtospace](#9.-csvtospace)
10. [FirstExample](#10.-FirstExample)
11. [FirstBiblio](#11.-FirstBiblio)
12. [CompileLaTeX](#12.-CompileLaTeX)


### 1. UnixPrac1

A .txt containing a collection of single line commands to perform different counts on a set of .fasta files containing genetic code.

### 2. boilerplate

This is my first .sh script, printing "This is a shell script!".

### 3. tabtocsv

This .sh script converts the tabs to commas in a given text file (without changing the original file) and saves result as txt file in the **Results** directory.

### 4. variables

This .sh script assigns values to variables and shows how these values can be replaced during the running of the script. There are two separate scripts, one with strings and one with integers.

### 5. MyExampleScript

This .sh script shows two ways of assigning variables, printing both to screen.

### 6. CountLines

This .sh script counts lines in a file (provided as a command line argument).

### 7. ConcatenateTwoFiles

This .sh script combines two files into a third. It requires three arguments: 1) first file (and realtive path) to be merged, 2) second file (and relative path) to be merged and 3) name and relative path of file to be created from merged files

### 8. tiff2png

This .sh script converts a given .tiff (provided as a command line argument) to a .png, saving the png in the **Results** directory.

### 9. csvtospace

This .sh script converts a given .csv file (provided as a command line argument) to a space delimited .txt file (without changing the original file) and saves the result in the **Results** folder.

### 10. FirstExample

This .tex file contains my first LaTeX code for a simple document with title, abstract, 2 sections, equations and one bibliography reference using BibTeX.

### 11. FirstBiblio

This .bib file contains a BibTeX reference taken from Google Scholar for use in FirstExample.tex.

### 12. CompileLaTeX

This .sh script compiles a LaTeX .tex file (provided as a command line argument) with BibTeX and creates a pdf. It also removes all the unnecessary files that are created at the same time. If a path, such as ../Results/, is provided as a second command line argument, the resulting pdf will be moved to that directory. Note that this second argument is optional.**********************************************************************

Found following files in results directory: .txt, README.md...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 12 code files: ConcatenateTwoFiles.sh, CompileLatex.sh, CountLines.sh, variables.sh, tiff2png.sh, csvtospace.sh, FirstExample.tex, MyExampleScript.sh, FirstBiblio.bib, UnixPrac1.txt, tabtocsv.sh, boilerplate.sh

Found the following extra files: gmarbles.png
0.5 pt deducted per extra file

Current Points = 97.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Lucy Goodyear lucy.goodyear19@imperial.ac.uk
# Script: ConcatenateTwoFiles.sh
# Desc: Merges two given files into a third file
# Arguments: 1) First file (and relative path) to be merged
#            2) Second file (and relative path) to be merged
#            3) Name and relative path of file to be created
#               from merged files
# Date: Oct 2019

# check a csv file has been provided as a command line argument
if ["$1" == ""] || ["$2" == ""] || ["$3" == ""] 
then
    echo "Please provide two files to merge and the name of the third file to be created"
    exit
fi

# First file is copied into 3rd file
cat $1 > $3
# Second file is merged into 3rd file 
cat $2 >> $3
# Print contents of 3rd file
echo "Merged File is"
cat $3

# exit**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 

**********************************************************************
Please provide two files to merge and the name of the third file to be created

**********************************************************************

Code ran without errors

Time consumed = 0.00612s

======================================================================
Inspecting script file CompileLatex.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Lucy Goodyear lucy.goodyear19@imperial.ac.uk
# Script: CompileLatex.sh
# Desc: Compiles a .tex file, producing a pdf
# Arguments: 1) .tex file 2) (optional) path for directory
# into which the resulting pdf will be moved
# Date: Oct 2019

# check .tex file has been provided as a command line argument
if [ "$1" == "" ] 
then
    echo "Please provide a .tex file to compile"
    exit
fi

# compile .tex files
echo "Compiling..."

pdflatex $1.tex
pdflatex $1.tex
bibtex $1
pdflatex $1.tex
pdflatex $1.tex
open $1.pdf

# if path is provided as second argument,
# such as ../Results/, the resulting pdf
# will be moved to that directory
mv $1.pdf $2$1.pdf 

# cleanup
rm *~
rm *.aux
rm *.dvi
rm *.log
rm *.nav
rm *.out
rm *.snm
rm *.toc
rm *.bbl
rm *.blg
rm *.fls

echo "Done"

# exit**********************************************************************

Testing CompileLatex.sh...

Output (only first 500 characters): 

**********************************************************************
Please provide a .tex file to compile

**********************************************************************

Code ran without errors

Time consumed = 0.00506s

======================================================================
Inspecting script file CountLines.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Lucy Goodyear lucy.goodyear19@imperial.ac.uk
# Script: CountLines.sh
# Desc: Counts the lines in a given file
# Arguments: 1) The file (and relative path) to count lines of
# Date: Oct 2019

# check a file has been provided as a command line argument
if [ "$1" == "" ] 
then
    echo "Please provide a file to count the lines of"
    exit
fi

# Counts the lines the file provided
NumLines=`wc -l < $1`
echo "The file $1 has $NumLines lines"

# exit**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 

**********************************************************************
Please provide a file to count the lines of

**********************************************************************

Code ran without errors

Time consumed = 0.00512s

======================================================================
Inspecting script file variables.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Lucy Goodyear lucy.goodyear19@imperial.ac.uk
# Script: variables.sh
# Desc: Shows use of variables
# Arguments: none
# Date: Oct 2019

# shows the use of variables
MyVar='some string'
echo 'The current value of the variable is' $MyVar
echo 'Please enter new string'
read MyVar
echo 'The current value of the variable is' $MyVar

# Reading multiple variables
echo 'Enter two numbers separated by space(s)'
read a b
echo 'you entered ' $a ' and' $b'. Their sum is:'
mysum=`expr $a + $b`
echo $mysum

# exit**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 

**********************************************************************
The current value of the variable is some string
Please enter new string
The current value of the variable is
Enter two numbers separated by space(s)
you entered   and . Their sum is:


**********************************************************************

Encountered error (or warning):
expr: syntax error

======================================================================
Inspecting script file tiff2png.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Lucy Goodyear lucy.goodyear19@imperial.ac.uk
# Script: tiff2png.sh
# Desc: Converts a tiff into a png
# Arguments: tiff to be converted
# Date: Oct 2019

# check a csv file has been provided as a command line argument
if [ "$1" == "" ] 
then
    echo "Please provide a tiff to convert"
    exit
fi

# For loop to convert a tiff into a png
for f in ../Data/*.tif;
    do
        echo "Converting $f";
        convert "$f"  "$(basename "$f" .tif).png";
        mv $1.png ../Results/$1.png; # Move resulting png into Results directory
        echo "Done"
    done

# exit**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 

**********************************************************************
Please provide a tiff to convert

**********************************************************************

Code ran without errors

Time consumed = 0.00802s

======================================================================
Inspecting script file csvtospace.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Lucy Goodyear lucy.goodyear19@imperial.ac.uk
# Script: csvtospace.sh
# Desc: Convert csv into txt file, converting commas into spaces
# Arguments: 1) csv file to be converted
# Date: Oct 2019

# check a csv file has been provided as a command line argument
if [ "$1" == "" ] 
then
    echo "Please provide a csv file to convert"
    exit
fi

# convert the csv to a space delimited file
echo "Creating a space delimited version of $1..."
cat ../Data/$1.csv | tr -s "," " " >> ../Results/$1.txt # Move resulting txt file into Results directory
echo "Done"

# exit
**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 

**********************************************************************
Please provide a csv file to convert

**********************************************************************

Code ran without errors

Time consumed = 0.00397s

======================================================================
Inspecting script file FirstExample.tex...

File contents are:
**********************************************************************
\documentclass[12pt]{article}
\title{A Simple Document}
\author{Lucy Goodyear}
\date{October 2019}

\begin{document}
	\maketitle
	
	\begin{abstract}
		This is a latex example.
	\end{abstract}
	
	\section{Introdution}
		More words.
	
	\section{Materials \& Methods}
		It is easier to use equations on LaTeX than in word.
		\begin{equation}
		E=mc^2
		\end{equation}
		Or you can write an equation embedded $E=mc^{2}$
		This equation was first proposed by Einstein in 1905 \cite{einstein1905does}.
	
	\bibliographystyle{plain}
	\bibliography{FirstBiblio}
	
\end{document}
**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Lucy Goodyear lucy.goodyear19@imperial.ac.uk
# Script: MyExampleScript.sh
# Desc: Shows two ways of assigning variables
# Arguments: none
# Date: Oct 2019

# assign variables
msg1="Hello"
msg2=$USER
echo # empty line for easier readability
# print variables to screen
echo "$msg1 $msg2"
# print variable contents to screen explicitly
echo "Hello $USER"
echo

# exit**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 

**********************************************************************

Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00689s

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:
**********************************************************************
@article{einstein1905does,
  title={Does the inertia of a body depend upon its energy-content},
  author={Einstein, Albert},
  journal={Annalen der Physik},
  volume={18},
  number={13},
  pages={639--41},
  year={1905}
}
**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:
**********************************************************************
# Author: Lucy Goodyear lucy.goodyear19@imperial.ac.uk
# Desc: Conatains a collection of single line commands 
#       to perform different counts on a set of .fasta 
#       files containing genetic code.
# Date: Oct 2019

#1 Count the number of lines in each .fasta file
find ../Data/ -type f -name "*.fasta" -exec wc -l {} \;

#2 Print everything starting from the second line for the E. coli genome
tail -n +2 ../Data/E.coli.fasta

#3 Count the sequence length of the E. coli genome
tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | wc -m

#4 Count the matches of the "ATGC" sequence in the genome of E. coli
tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | grep -o "ATGC" | wc -l

#5 Compute the AT/GC ratio
echo $(tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | grep -o "A\|T" | wc -l) / $(tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | grep -o "G\|C" | wc -l) | bc -l
**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Lucy Goodyear lucy.goodyear19@imperial.ac.uk
# Script: tabtocsv.sh
# Desc: Substitutes the tabs in the files with commas
# Saves the output into a .csv files
# Arguments: 1) tab delimited file to be converted
# Date: Oct 2019

# check that a tab delimited file to convert has been provided
if [ "$1" == "" ] 
then
    echo "Please provide a tab delimited file"
    exit
fi

# convert tab delimited file into comma delimited file
echo "Creating a comma delimited version of $1 ..."
cat ../Data/$1.txt | tr -s "\t" "," >> ../Results/$1.csv # Move resulting txt file into Results directory
echo "Done!"

# exit**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 

**********************************************************************
Please provide a tab delimited file

**********************************************************************

Code ran without errors

Time consumed = 0.00365s

======================================================================
Inspecting script file boilerplate.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Lucy Goodyear lucy.goodyear19@imperial.ac.uk
# Script: boilerplate.sh
# Desc: Simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2019

echo -e "\nThis is a shell script! \n"

# exit**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 

**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00416s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 97.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!