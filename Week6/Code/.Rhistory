freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec)
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)) / nrow(sites))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec)
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec/nrow(sites))
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
# 0 indicates the ancestoral allele and 1 indicates the derived allele
# calculate frequencies of the derived allele
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(apply(freq_spec/nrow(sites))) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
# calculate frequencies of the derived allele
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec/nrow(sites)) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
# calculate frequencies of the derived allele
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec/nrow(sites)) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec/20) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec/10) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
print(length(sites))
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
print(length(sites))
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
print(ncol(sites))
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
print(ncol(sites))
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec/ncol(sites)) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec/ncol(sites)) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
# 0 indicates the ancestoral allele and 1 indicates the derived allele
# calculate frequencies of the derived allele
sites <- as.matrix()
sfs <- function(x) {
# calculates sfs by finding locations of SNPs and the frequencies of "1"
# allele at each location
# find SNP locations
for (i in 1:ncol(x)) {
if (length(unique(x[,i])) == 2) {
sites <- cbind(sites, c(x[,i]))
}
}
# find frequencies for "1" allele
frequencies <- c()
for (j in (1:ncol(sites))) {
freq <- as.double(length(which((sites[,j]) == 1)))
# add alleles frequencies to frequency vector
frequencies <- c(frequencies, freq)
}
# create sfs
freq_spec <- rep(0, (nrow(sites)-1))
for (k in (1:length(freq_spec))) {
freq_spec[k] <- length(which(frequencies == k))
}
return(freq_spec/ncol(sites)) # divisions to get proportions rather than counts
}
# plot results
barplot(t(cbind(sfs(kws), sfs(kwn))), # t puts corresponding bars from the dataset next to each other
beside = T,
names.arg = seq(1:19),
xlab = "Allele frequency",
ylab = "Proportion of allele frequency",
legend = c("Southern Killer Whales", "Northern Killer Whales"))
cat("\nThe population with the greatest estimated population has a higher
proportion of singletons")
